{"version":3,"sources":["constants.ts","reducer.ts","utils.ts","RobotConsole.tsx","App.tsx","index.tsx"],"names":["ORIENTATION","ACTIONS","DIRECTIONS","EAST","NORTH","WEST","SOUTH","utils","validateCommand","robot","coordinates","x","y","exists","isNumber","value","Number","isNaN","toString","initialState","orientation","error","message","robotReducer","state","action","type","MOVE","newRobot","Error","PLACE","payload","LEFT","indexOf","length","RIGHT","REPORT","RESET","Container","styled","div","ConsoleTextArea","textarea","ConsoleTextInput","input","RobotConsole","useState","consoleOutput","setConsoleOutput","consoleInput","setConsoleInput","useReducer","robotState","dispatch","consoleRef","useRef","addToConsole","useCallback","newOutput","push","useEffect","current","scrollTop","scrollHeight","join","readOnly","ref","onChange","e","currentTarget","onKeyDown","key","command","trim","split","match","details","parseFloat","parseCommand","placeholder","Title","h1","Name","h5","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8fea731a.chunk.js","sourcesContent":["export const BOARD_X_MAX = 6;\r\nexport const BOARD_Y_MAX = 6;\r\n\r\nexport enum ORIENTATION {\r\n  NORTH = 'NORTH',\r\n  SOUTH = 'SOUTH',\r\n  EAST = 'EAST',\r\n  WEST = 'WEST',\r\n}\r\n\r\nexport const DIRECTIONS = [\r\n  ORIENTATION.EAST,\r\n  ORIENTATION.NORTH,\r\n  ORIENTATION.WEST,\r\n  ORIENTATION.SOUTH,\r\n];\r\n","import { DIRECTIONS, ORIENTATION } from './constants';\r\nimport { Coordinates, Robot } from './types';\r\nimport utils from './utils';\r\n\r\nexport enum ACTIONS {\r\n  MOVE = 'MOVE',\r\n  PLACE = 'PLACE',\r\n  LEFT = 'LEFT',\r\n  RIGHT = 'RIGHT',\r\n  REPORT = 'REPORT',\r\n  RESET = 'RESET',\r\n}\r\n\r\nexport interface PlaceAction {\r\n  coordinates: Coordinates;\r\n  orientation: ORIENTATION | null;\r\n}\r\n\r\ntype Action =\r\n  | { type: ACTIONS.MOVE }\r\n  | { type: ACTIONS.PLACE; payload: PlaceAction }\r\n  | { type: ACTIONS.LEFT }\r\n  | { type: ACTIONS.RIGHT }\r\n  | { type: ACTIONS.REPORT }\r\n  | { type: ACTIONS.RESET };\r\n\r\nexport const initialState: State = {\r\n  robot: {\r\n    orientation: ORIENTATION.NORTH,\r\n    coordinates: { x: 0, y: 0 },\r\n    exists: false,\r\n  },\r\n  error: false,\r\n  message: '',\r\n};\r\n\r\ninterface State {\r\n  robot: Robot;\r\n  error: boolean;\r\n  message: string;\r\n}\r\n\r\nexport const robotReducer = (state: State, action: Action): State => {\r\n  switch (action.type) {\r\n    case ACTIONS.MOVE: {\r\n      switch (state.robot.orientation) {\r\n        case ORIENTATION.NORTH: {\r\n          const coordinates: Coordinates = {\r\n            ...state.robot.coordinates,\r\n            y: state.robot.coordinates.y + 1,\r\n          };\r\n          const newRobot: Robot = { ...state.robot, coordinates };\r\n          if (utils.validateCommand(newRobot)) {\r\n            return { robot: newRobot, error: false, message: '' };\r\n          }\r\n          return {\r\n            ...state,\r\n            error: true,\r\n            message: 'Invalid move - outside y axis boundary.',\r\n          };\r\n        }\r\n        case ORIENTATION.SOUTH: {\r\n          const coordinates: Coordinates = {\r\n            ...state.robot.coordinates,\r\n            y: state.robot.coordinates.y - 1,\r\n          };\r\n          const newRobot: Robot = { ...state.robot, coordinates };\r\n          if (utils.validateCommand(newRobot)) {\r\n            return { robot: newRobot, error: false, message: '' };\r\n          }\r\n          return {\r\n            ...state,\r\n            error: true,\r\n            message: 'Invalid move - outside y axis boundary.',\r\n          };\r\n        }\r\n        case ORIENTATION.EAST: {\r\n          const coordinates: Coordinates = {\r\n            ...state.robot.coordinates,\r\n            x: state.robot.coordinates.x + 1,\r\n          };\r\n          const newRobot: Robot = { ...state.robot, coordinates };\r\n          if (utils.validateCommand(newRobot)) {\r\n            return { robot: newRobot, error: false, message: '' };\r\n          }\r\n          return {\r\n            ...state,\r\n            error: true,\r\n            message: 'Invalid move - outside x axis boundary.',\r\n          };\r\n        }\r\n        case ORIENTATION.WEST: {\r\n          const coordinates: Coordinates = {\r\n            ...state.robot.coordinates,\r\n            x: state.robot.coordinates.x - 1,\r\n          };\r\n          const newRobot: Robot = { ...state.robot, coordinates };\r\n          if (utils.validateCommand(newRobot)) {\r\n            return { robot: newRobot, error: false, message: '' };\r\n          }\r\n          return {\r\n            ...state,\r\n            error: true,\r\n            message: 'Invalid move - outside x axis boundary.',\r\n          };\r\n        }\r\n        default:\r\n          throw new Error('Invalid direction.');\r\n      }\r\n    }\r\n    case ACTIONS.PLACE: {\r\n      if (state.robot.exists) {\r\n        const newRobot: Robot = {\r\n          ...state.robot,\r\n          coordinates: action.payload.coordinates,\r\n        };\r\n        if (utils.validateCommand(newRobot)) {\r\n          return {\r\n            robot: newRobot,\r\n            error: false,\r\n            message: '',\r\n          };\r\n        }\r\n        return {\r\n          ...state,\r\n          error: true,\r\n          message:\r\n            'Invalid robot placement. Robot must be placed within the boundaries.',\r\n        };\r\n      }\r\n      if (action.payload.orientation) {\r\n        const newRobot: Robot = {\r\n          ...state.robot,\r\n          coordinates: action.payload.coordinates,\r\n          orientation: action.payload.orientation,\r\n          exists: true,\r\n        };\r\n\r\n        if (utils.validateCommand(newRobot)) {\r\n          return {\r\n            robot: newRobot,\r\n            error: false,\r\n            message: '',\r\n          };\r\n        }\r\n        return {\r\n          ...state,\r\n          error: true,\r\n          message:\r\n            'Invalid robot placement. Robot must be placed within the boundaries.',\r\n        };\r\n      }\r\n      return {\r\n        ...state,\r\n        error: true,\r\n        message: 'An orientation must be provided for first placements.',\r\n      };\r\n    }\r\n    case ACTIONS.LEFT: {\r\n      return {\r\n        ...state,\r\n        robot: {\r\n          ...state.robot,\r\n          orientation:\r\n            DIRECTIONS[\r\n              (DIRECTIONS.indexOf(state.robot.orientation) + 1) %\r\n                DIRECTIONS.length\r\n            ],\r\n        },\r\n      };\r\n    }\r\n    case ACTIONS.RIGHT: {\r\n      return {\r\n        ...state,\r\n        robot: {\r\n          ...state.robot,\r\n          orientation:\r\n            DIRECTIONS[\r\n              (DIRECTIONS.indexOf(state.robot.orientation) +\r\n                DIRECTIONS.length -\r\n                1) %\r\n                DIRECTIONS.length\r\n            ],\r\n        },\r\n      };\r\n    }\r\n    case ACTIONS.REPORT: {\r\n      return state;\r\n    }\r\n    case ACTIONS.RESET: {\r\n      return {\r\n        ...state,\r\n        error: false,\r\n        message: '',\r\n      };\r\n    }\r\n    default: {\r\n      throw new Error(`Unspecified action type.`);\r\n    }\r\n  }\r\n};\r\n","import { BOARD_X_MAX, BOARD_Y_MAX } from './constants';\r\nimport { Robot } from './types';\r\n\r\nconst utils = {\r\n  validateCommand(robot: Robot): boolean {\r\n    if (\r\n      robot.coordinates?.x <= BOARD_X_MAX &&\r\n      robot.coordinates?.y <= BOARD_Y_MAX &&\r\n      robot.coordinates?.x >= 0 &&\r\n      robot.coordinates?.y >= 0 &&\r\n      robot.exists\r\n    )\r\n      return true;\r\n\r\n    return false;\r\n  },\r\n  isNumber(value: string | number): boolean {\r\n    return (\r\n      value != null && value !== '' && !Number.isNaN(Number(value.toString()))\r\n    );\r\n  },\r\n};\r\n\r\nexport default utils;\r\n","import React, {\r\n  useCallback,\r\n  useEffect,\r\n  useReducer,\r\n  useRef,\r\n  useState,\r\n} from 'react';\r\nimport styled from 'styled-components';\r\nimport { ORIENTATION } from './constants';\r\nimport { ACTIONS, initialState, robotReducer } from './reducer';\r\n\r\nconst Container = styled.div`\r\n  background-color: rgba(66, 66, 66, 0.7);\r\n  width: 100%;\r\n  max-width: 400px;\r\n  padding: 32px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\n\r\nconst ConsoleTextArea = styled.textarea`\r\n  display: block;\r\n  width: 100%;\r\n  height: 10em;\r\n  background-color: rgba(75, 75, 90, 0.7);\r\n  resize: none;\r\n  margin-bottom: 1em;\r\n  border-radius: 10px;\r\n  padding: 15px 15px;\r\n  outline: none;\r\n  border: none;\r\n  color: white;\r\n`;\r\n\r\nconst ConsoleTextInput = styled.input`\r\n  display: block;\r\n  width: 100%;\r\n  background-color: rgba(75, 75, 90, 0.7);\r\n  color: white;\r\n  border-radius: 10px;\r\n  padding: 0 15px;\r\n  height: 30px;\r\n  outline: none;\r\n  border: none;\r\n`;\r\n\r\nconst RobotConsole: React.FC = () => {\r\n  const [consoleOutput, setConsoleOutput] = useState<string[]>([]);\r\n  const [consoleInput, setConsoleInput] = useState<string>();\r\n  const [robotState, dispatch] = useReducer(robotReducer, initialState);\r\n  const consoleRef = useRef<HTMLTextAreaElement>(null);\r\n\r\n  const scrollToBottom = () => {\r\n    if (consoleRef && consoleRef.current)\r\n      consoleRef.current.scrollTop = consoleRef.current.scrollHeight;\r\n  };\r\n\r\n  const addToConsole = useCallback(\r\n    (input: string) => {\r\n      const newOutput = [...consoleOutput];\r\n      newOutput.push(input);\r\n      setConsoleOutput(newOutput);\r\n      setConsoleInput('');\r\n    },\r\n    [consoleOutput]\r\n  );\r\n\r\n  useEffect(() => {\r\n    scrollToBottom();\r\n  }, [consoleOutput]);\r\n\r\n  useEffect(() => {\r\n    if (robotState.error) {\r\n      addToConsole(robotState.message);\r\n    }\r\n    return () => {\r\n      dispatch({ type: ACTIONS.RESET });\r\n    };\r\n  }, [addToConsole, robotState.error, robotState.message]);\r\n\r\n  const parseCommand = (input: string) => {\r\n    const command = input.trim().split(/(\\s+)/);\r\n    try {\r\n      switch (command[0]) {\r\n        case ACTIONS.PLACE: {\r\n          // PLACE 1,2,EAST or PLACE 1,2 (if robot exists)\r\n          if (input.match(/PLACE \\d,\\d,NORTH|SOUTH|EAST|WEST/)) {\r\n            const details = command[2].split(',');\r\n            const x = parseFloat(details[0]);\r\n            const y = parseFloat(details[1]);\r\n            const orientation = details[2];\r\n            dispatch({\r\n              type: ACTIONS.PLACE,\r\n              payload: {\r\n                coordinates: { x, y },\r\n                orientation: orientation as ORIENTATION,\r\n              },\r\n            });\r\n          } else if (input.match(/PLACE \\d,\\d/) && robotState.robot.exists) {\r\n            const details = command[2].split(',');\r\n            const x = parseFloat(details[0]);\r\n            const y = parseFloat(details[1]);\r\n            dispatch({\r\n              type: ACTIONS.PLACE,\r\n              payload: { coordinates: { x, y }, orientation: null },\r\n            });\r\n          } else {\r\n            throw Error('PLACE commmand format incorrect.');\r\n          }\r\n          break;\r\n        }\r\n        case ACTIONS.MOVE: {\r\n          dispatch({ type: ACTIONS.MOVE });\r\n          break;\r\n        }\r\n        case ACTIONS.LEFT: {\r\n          dispatch({ type: ACTIONS.LEFT });\r\n          break;\r\n        }\r\n        case ACTIONS.RIGHT: {\r\n          dispatch({ type: ACTIONS.RIGHT });\r\n          break;\r\n        }\r\n        case ACTIONS.REPORT: {\r\n          dispatch({ type: ACTIONS.REPORT });\r\n          if (robotState.robot.exists)\r\n            addToConsole(\r\n              `REPORT: ${robotState.robot.coordinates.x},${robotState.robot.coordinates.y},${robotState.robot.orientation}`\r\n            );\r\n          else addToConsole('No robot deployed!');\r\n          break;\r\n        }\r\n        default:\r\n          addToConsole('Invalid command.');\r\n          break;\r\n      }\r\n    } catch (error) {\r\n      addToConsole(error as string);\r\n    }\r\n  };\r\n\r\n  const handleConsoleInputChange = (e: React.FormEvent<HTMLInputElement>) => {\r\n    setConsoleInput(e.currentTarget.value);\r\n  };\r\n\r\n  const handleConsoleInputKeyDown = (\r\n    e: React.KeyboardEvent<HTMLInputElement>\r\n  ) => {\r\n    if (e.key === 'Enter') {\r\n      if (consoleInput) {\r\n        addToConsole(consoleInput);\r\n        parseCommand(consoleInput);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <ConsoleTextArea\r\n        value={consoleOutput.join('\\n')}\r\n        readOnly\r\n        ref={consoleRef}\r\n      />\r\n      <ConsoleTextInput\r\n        type=\"text\"\r\n        value={consoleInput || ''}\r\n        onChange={handleConsoleInputChange}\r\n        onKeyDown={handleConsoleInputKeyDown}\r\n        placeholder=\"Input a command and press enter\"\r\n      />\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default RobotConsole;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport RobotConsole from './RobotConsole';\r\n\r\nconst Container = styled.div`\r\n  position: relative;\r\n  background-color: #282c34;\r\n  min-height: 100vh;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  color: hsla(0, 0%, 100%, 0.87);\r\n  text-rendering: optimizeLegibility;\r\n  font-family: 'Montserrat', sans-serif;\r\n`;\r\n\r\nconst Title = styled.h1`\r\n  display: block;\r\n  font-weight: 600;\r\n  font-size: 10vmin;\r\n  margin: 0;\r\n  color: rgb(222, 228, 253);\r\n`;\r\n\r\nconst Name = styled.h5`\r\n  display: block;\r\n  font-weight: 200;\r\n  font-size: 2vmin;\r\n`;\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <Container>\r\n      <Title>toy-robot</Title>\r\n      <Name>Dan Woods</Name>\r\n      <RobotConsole />\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}